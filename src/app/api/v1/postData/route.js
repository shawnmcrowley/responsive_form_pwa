import { NextResponse } from "next/server"
import snowflake from "snowflake-sdk"
//import connection from "@/app/utils/snowflake_connection"
import { resolve } from "path"

export async function POST(req) {

   // Update to pull from Evironment Variables
 
    const connection = snowflake.createConnection({
          account: process.env.SNOWFLAKE_ACCOUNT,
          username: process.env.SNOWFLAKE_USERNAME,
          password: process.env.SNOWFLAKE_PASSWORD,
          database: process.env.SNOWFLAKE_DATABASE,
          schema: process.env.SNOWFLAKE_SCHEMA,
          warehouse: process.env.SNOWFLAKE_WAREHOUSE,
          role: process.env.SNOWFLAKE_ROLE,
          authenticator: process.env.SNOWFLAKE_AUTHENTICATOR,
          // Use resolve for straight Private Key Authentication
          privateKeyPath: resolve(process.cwd(), process.env.SNOWFLAKE_PRIVATEKEYPATH),
          // Use readFileSync funtion if you need to read the file directly
          //privateKeyPath: readFileSync(resolve(process.cwd(),process.env.SNOWFLAKE_PRIVATEKEYPATH ),'utf8'),
          privateKeyPass: process.env.SNOWFLAKE_PRIVATEKEYPASS
 
 });

 // Use "connectAsync" with authenticator, "connect" with username/password login

connection.connectAsync((err, conn) => {
  if (err) {
    console.error("Unable to Connect: " + err.message)
  } else {
    console.log("Successfully Connected to Snowflake in Route Handler.")
        
  }
})

    try {
        const formData = await req.formData()
        const firstname = formData.get('firstname')
        const lastname = formData.get('lastname')
        const email = formData.get('email')
        const password = formData.get('password')

        // Validate input
        if (!firstname || !lastname || !email || !password) {
            return NextResponse.json({
                message: "Missing required fields",
                status: 400
            }, { status: 400 })
        }

        console.log('Received data: ', firstname, lastname, email, password)

        // Insert data into Snowflake table

        //const connection = await connectDB();

        connection.execute({

            // Updating insert statement to include only column data, ID is autogenerated and will be returned
            sqlText: "INSERT INTO DB_TEST.SCHEMA_TEST.PERSONS_DATA (FIRSTNAME, LASTNAME, EMAIL, PASSWORD)VALUES (?,?,?,?)",
            binds: [firstname, lastname, email, password],
            complete: function (err, stmt, rows) {

                if (err) {

                    console.error('Unable to Insert Data: ', err);

                } else {

                    console.log('Data Inserted Successfully!', rows);

                }

            }
        });

        connection.destroy()

       return NextResponse.json({
            message: "Data Submitted Successfully",
            firstname,
            lastname,
            email,
            password,
            status: 200
        }, { status: 200 })
    } catch (error) {
        console.error('Error processing form data:', error)
        return NextResponse.json({
            message: "Error processing form data",
            status: 500
        }, { status: 500 })
    
    }

}


/*
    // Get Data from Snowflake table

    connection.execute({

        sqlText: 'SELECT * FROM DB_TEST.SCHEMA_TEST.PERSONS_DATA',

        complete: function (err, stmt, rows) {

            if (err) {

                console.error('Failed to execute statement due to the following error: ' + err.message);

            } else {

                console.debug('Number of rows returned: ' + rows.length);
                // Loop through query results

                for (let i = 0; i < rows.length; i++) {

                    console.debug('ID: ', rows[i].ID);

                    console.debug('First Name: ', rows[i].FIRSTNAME);

                    console.debug('Last Name: ', rows[i].LASTNAME);

                    console.debug('Email: ', rows[i].EMAIL);

                }
            }


        }
        
    });
*/



/*
export async function GET(req) {
    const searchParams = new URLSearchParams(req.nextUrl.search)
    const first = searchParams.get('first_name')
    const last = searchParams.get('last_name')
    console.log ('Form Data:', first+" " +last)
    return NextResponse.json({message: 'Form submitted successfully', first, last})
}
*/


